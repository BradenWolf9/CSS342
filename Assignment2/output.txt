Sun Apr 25 16:30:08 PDT 2021
Linux csslab9.uwb.edu 3.10.0-1160.21.1.el7.x86_64 #1 SMP Tue Mar 16 18:28:22 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
uid=1080063(bwolf1) gid=2121080063(bwolf1) groups=2121080063(bwolf1),605559(lab-access)
=====================================================
1. Compiles without warnings with -Wall -Wextra flags
=====================================================
=====================================================
2. Runs and produces correct output
=====================================================
test1 complete
test2 complete
test3 complete
test4 complete
test5 complete
test6 complete
Done.
=====================================================
3. clang-tidy warnings are fixed
=====================================================
=====================================================
4. clang-format does not find any formatting issues
=====================================================
Running clang-format on ./main.cpp
82c82
<   TimeSpan ts3(2,374, -1);
---
>   TimeSpan ts3(2, 374, -1);
Running clang-format on ./timespan.cpp
9,10d8
< 
< 
17c15
<   if(ts.isNegative) {
---
>   if (ts.isNegative) {
21c19
<   if(ts.minute < 10) {
---
>   if (ts.minute < 10) {
26c24
<   if(ts.second < 10) {
---
>   if (ts.second < 10) {
33,34d30
< 
< 
40,59c36,46
< TimeSpan::TimeSpan(double hour, double minute, double second) :
<   hour{hour},
<   minute{minute},
<   second{second} {
<     this->totalSeconds = 0;
<     this->isNegative = false;
<     this->tsSum = nullptr;
<     this->tsSub = nullptr;
<     this->tsProduct = nullptr;
<     this->less = false;
<     this->greater = false;
<     this->simplify();
<   }
< 
<   // copy constructor
<   TimeSpan::TimeSpan(const TimeSpan &copy) : hour{copy.hour}, minute{copy.minute},
<     second{copy.second}, totalSeconds{copy.totalSeconds}, isNegative{copy.isNegative},
<     tsSum{copy.tsSum}, tsSub{copy.tsSub}, tsProduct{copy.tsProduct},
<     less{copy.less}, greater{copy.greater} {}
< 
---
> TimeSpan::TimeSpan(double hour, double minute, double second)
>     : hour{hour}, minute{minute}, second{second} {
>   this->totalSeconds = 0;
>   this->isNegative = false;
>   this->tsSum = nullptr;
>   this->tsSub = nullptr;
>   this->tsProduct = nullptr;
>   this->less = false;
>   this->greater = false;
>   this->simplify();
> }
60a48,53
> // copy constructor
> TimeSpan::TimeSpan(const TimeSpan &copy)
>     : hour{copy.hour}, minute{copy.minute}, second{copy.second},
>       totalSeconds{copy.totalSeconds},
>       isNegative{copy.isNegative}, tsSum{copy.tsSum}, tsSub{copy.tsSub},
>       tsProduct{copy.tsProduct}, less{copy.less}, greater{copy.greater} {}
67,68c60,62
< void TimeSpan::simplify () {
<   this->totalSeconds = this->second + (this->minute * 60) + (this->hour * 60 * 60);
---
> void TimeSpan::simplify() {
>   this->totalSeconds =
>       this->second + (this->minute * 60) + (this->hour * 60 * 60);
79c73
<   if(!isPositive()) {
---
>   if (!isPositive()) {
82,83c76
<   }
<   else {
---
>   } else {
87c80
<   if(this->hour == 0) {
---
>   if (this->hour == 0) {
90c83
<   if(this->minute == 0) {
---
>   if (this->minute == 0) {
93c86
<   if(this->second == 0) {
---
>   if (this->second == 0) {
114c107
<   if(!this->isNegative) {
---
>   if (!this->isNegative) {
117c110
<   if(!ts.isNegative) {
---
>   if (!ts.isNegative) {
135c128
<   if(!this->isNegative) {
---
>   if (!this->isNegative) {
138c131
<   if(!ts.isNegative) {
---
>   if (!ts.isNegative) {
153c146
<   if(!this->isNegative) {
---
>   if (!this->isNegative) {
156c149
<   if(!ts.isNegative) {
---
>   if (!ts.isNegative) {
171c164
<   if(!this->isNegative) {
---
>   if (!this->isNegative) {
174c167
<   if(!ts.isNegative) {
---
>   if (!ts.isNegative) {
201,202d193
< 
< 
209,210c200
<   return (this->hour   == ts.hour   &&
<           this->minute == ts.minute &&
---
>   return (this->hour == ts.hour && this->minute == ts.minute &&
239,240d228
< 
< 
255,259c243
< bool TimeSpan::isPositive() const {
<   return (this->totalSeconds >= 0);
< }
< 
< 
---
> bool TimeSpan::isPositive() const { return (this->totalSeconds >= 0); }
=====================================================
5. No memory leaks using g++
=====================================================
=====================================================
6. No memory leaks using valgrind, look for "definitely lost" 
=====================================================
==5796== Memcheck, a memory error detector
==5796== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5796== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==5796== Command: ./a.out
==5796== Parent PID: 5733
==5796== 
==5796== 
==5796== HEAP SUMMARY:
==5796==     in use at exit: 0 bytes in 0 blocks
==5796==   total heap usage: 17 allocs, 17 frees, 73,728 bytes allocated
==5796== 
==5796== All heap blocks were freed -- no leaks are possible
==5796== 
==5796== For lists of detected and suppressed errors, rerun with: -s
==5796== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
=====================================================
7. Tests have full code coverage
=====================================================
File '/home/NETID/bwolf1/CSS342/CSS342/Assignment2/main.cpp':
Name                        Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------
test1()                           1       0 100.00%        22       0 100.00%
test2()                           1       0 100.00%        15       0 100.00%
test3()                           1       0 100.00%        10       0 100.00%
test4()                           1       0 100.00%        13       0 100.00%
test5()                           1       0 100.00%        11       0 100.00%
test6()                           1       0 100.00%         7       0 100.00%
main                              1       0 100.00%        10       0 100.00%
-----------------------------------------------------------------------------
TOTAL                             7       0 100.00%        88       0 100.00%

File '/home/NETID/bwolf1/CSS342/CSS342/Assignment2/timespan.cpp':
Name                                          Regions    Miss   Cover     Lines    Miss   Cover
-----------------------------------------------------------------------------------------------
operator<<(std::ostream&, TimeSpan const&)          7       0 100.00%        16       0 100.00%
TimeSpan::TimeSpan(double, double, double)          1       0 100.00%        10       0 100.00%
TimeSpan::TimeSpan(TimeSpan const&)                 1       0 100.00%         1       0 100.00%
TimeSpan::simplify()                               10       0 100.00%        30       0 100.00%
TimeSpan::flipSign()                                1       0 100.00%         5       0 100.00%
TimeSpan::operator+(TimeSpan const&)                5       0 100.00%        19       0 100.00%
TimeSpan::operator-(TimeSpan const&)                5       0 100.00%        19       0 100.00%
TimeSpan::operator+=(TimeSpan const&)               5       0 100.00%        16       0 100.00%
TimeSpan::operator-=(TimeSpan const&)               5       0 100.00%        16       0 100.00%
TimeSpan::operator*(unsigned int)                   1       0 100.00%        12       0 100.00%
TimeSpan::operator==(TimeSpan const&) const         5       0 100.00%         5       0 100.00%
TimeSpan::operator!=(TimeSpan const&) const         1       0 100.00%         3       0 100.00%
TimeSpan::operator<(TimeSpan const&) const          1       0 100.00%         3       0 100.00%
TimeSpan::operator>(TimeSpan const&) const          1       0 100.00%         3       0 100.00%
TimeSpan::operator<=(TimeSpan const&)               3       0 100.00%         3       0 100.00%
TimeSpan::operator>=(TimeSpan const&)               3       0 100.00%         3       0 100.00%
TimeSpan::getHour() const                           1       0 100.00%         1       0 100.00%
TimeSpan::getMinute() const                         1       0 100.00%         1       0 100.00%
TimeSpan::getSecond() const                         1       0 100.00%         1       0 100.00%
TimeSpan::isPositive() const                        1       0 100.00%         3       0 100.00%
TimeSpan::~TimeSpan()                               1       0 100.00%         5       0 100.00%
-----------------------------------------------------------------------------------------------
TOTAL                                              60       0 100.00%       175       0 100.00%
/home/NETID/bwolf1/CSS342/CSS342/Assignment2/main.cpp:
    1|       |#include <cassert>
    2|       |#include <iostream>
    3|       |#include <sstream>
    4|       |
    5|       |#include "timespan.h"
    6|       |
    7|       |using namespace std;
    8|       |
    9|       |// testing constructor
   10|      1|void test1() {
   11|      1|  TimeSpan ts(1, 20, 30);
   12|      1|  stringstream ss;
   13|      1|  ss << ts;
   14|      1|  assert(ss.str() == "1:20:30");
   15|      1|
   16|      1|  TimeSpan ts2(4, -20, -90);
   17|      1|  ss.str("");
   18|      1|  ss << ts2;
   19|      1|  assert(ss.str() == "3:38:30");
   20|      1|
   21|      1|  TimeSpan ts3(1.5, 30.5, -90);
   22|      1|  ss.str("");
   23|      1|  ss << ts3;
   24|      1|  assert(ss.str() == "1:59:00");
   25|      1|
   26|      1|  TimeSpan ts4(0, 0.07, 0);
   27|      1|  ss.str("");
   28|      1|  ss << ts4;
   29|      1|  assert(ss.str() == "0:00:04");
   30|      1|  cout << "test1 complete" << endl;
   31|      1|}
   32|       |
   33|       |// testing equality, addition, subtraction, multiplication
   34|      1|void test2() {
   35|      1|  TimeSpan ts(1, 20, 30);
   36|      1|  TimeSpan ts2(1, 20, 30);
   37|      1|  TimeSpan ts3(0, 0, 0);
   38|      1|  assert(ts == ts2);
   39|      1|  assert(!(ts != ts2));
   40|      1|  assert(ts != ts3);
   41|      1|  assert((ts + ts + ts) == (ts2 * 3));
   42|      1|  assert((ts * 5) == (ts2 * 4) + ts2);
   43|      1|  assert((ts * 5) == (ts2 * 6) - ts2);
   44|      1|  assert((ts + ts - ts) == ((ts2 * 2) - ts));
   45|      1|  assert((ts - ts2) == ts3);
   46|      1|  assert((ts3 * 5) == ts3);
   47|      1|  cout << "test2 complete" << endl;
   48|      1|}
   49|       |
   50|      1|void test3() {
   51|      1|  TimeSpan ts0(0, 0, 0);
   52|      1|  TimeSpan ts1(0, 0, 10);
   53|      1|  TimeSpan ts2 = ts0 - ts1;
   54|      1|  assert(ts1.isPositive() && !ts2.isPositive());
   55|      1|  stringstream ss;
   56|      1|  ss << ts2;
   57|      1|  assert(ss.str() == "-0:00:10");
   58|      1|  cout << "test3 complete" << endl;
   59|      1|}
   60|       |
   61|      1|void test4() {
   62|      1|  TimeSpan ts0(3, 5, -2);
   63|      1|  TimeSpan ts1(5, 8, 6);
   64|      1|  ts0 += ts1;
   65|      1|  stringstream ss;
   66|      1|  ss << ts0;
   67|      1|  assert(ss.str() == "8:13:04");
   68|      1|  TimeSpan ts2(23, 27, 8);
   69|      1|  ss.str("");
   70|      1|  ts2 -= ts0;
   71|      1|  ss << ts2;
   72|      1|  cout << "test4 complete" << endl;
   73|      1|}
   74|       |
   75|      1|void test5() {
   76|      1|  TimeSpan ts0(2746, 38, -9);
   77|      1|  TimeSpan ts1(2, 374, -1);
   78|      1|  assert(ts0 > ts1);
   79|      1|  assert(ts1 < ts0);
   80|      1|  TimeSpan ts2(2746, 38, -9);
   81|      1|  assert(ts0 >= ts2 && ts0 >= ts1);
   82|      1|  TimeSpan ts3(2,374, -1);
   83|      1|  assert(ts1 <= ts3 && ts1 <= ts0);
   84|      1|  cout << "test5 complete" << endl;
   85|      1|}
   86|       |
   87|      1|void test6() {
   88|      1|  TimeSpan ts0(472, 45, 8);
   89|      1|  assert(ts0.getHour() == 472);
   90|      1|  assert(ts0.getMinute() == 45);
   91|      1|  assert(ts0.getSecond() == 8);
   92|      1|  cout << "test6 complete" << endl;
   93|      1|}
   94|       |
   95|      1|int main() {
   96|      1|  test1();
   97|      1|  test2();
   98|      1|  test3();
   99|      1|  test4();
  100|      1|  test5();
  101|      1|  test6();
  102|      1|  cout << "Done." << std::endl;
  103|      1|  return 0;
  104|      1|}

/home/NETID/bwolf1/CSS342/CSS342/Assignment2/timespan.cpp:
    1|       |//
    2|       |// Created by Yusuf Pisan on 4/2/18.
    3|       |//
    4|       |// Adjusted by Braden Wolf 4/22/21
    5|       |//
    6|       |
    7|       |#include "timespan.h"
    8|       |
    9|       |
   10|       |
   11|       |/*************************************************************************
   12|       |                              Insert
   13|       |**************************************************************************/
   14|       |
   15|       |// insert 0:00:00
   16|      7|ostream &operator<<(ostream &out, const TimeSpan &ts) {
   17|      7|  if(ts.isNegative) {
   18|      1|    out << "-";
   19|      1|  }
   20|      7|  out << ts.hour << ":";
   21|      7|  if(ts.minute < 10) {
   22|      2|    out << "0";
   23|      2|  }
   24|      7|
   25|      7|  out << ts.minute << ":";
   26|      7|  if(ts.second < 10) {
   27|      4|    out << "0";
   28|      4|  }
   29|      7|  out << ts.second;
   30|      7|  return out;
   31|      7|}
   32|       |
   33|       |
   34|       |
   35|       |/*************************************************************************
   36|       |                              Constructor
   37|       |**************************************************************************/
   38|       |
   39|       |// explicit constructor
   40|       |TimeSpan::TimeSpan(double hour, double minute, double second) :
   41|       |  hour{hour},
   42|       |  minute{minute},
   43|     33|  second{second} {
   44|     33|    this->totalSeconds = 0;
   45|     33|    this->isNegative = false;
   46|     33|    this->tsSum = nullptr;
   47|     33|    this->tsSub = nullptr;
   48|     33|    this->tsProduct = nullptr;
   49|     33|    this->less = false;
   50|     33|    this->greater = false;
   51|     33|    this->simplify();
   52|     33|  }
   53|       |
   54|       |  // copy constructor
   55|       |  TimeSpan::TimeSpan(const TimeSpan &copy) : hour{copy.hour}, minute{copy.minute},
   56|       |    second{copy.second}, totalSeconds{copy.totalSeconds}, isNegative{copy.isNegative},
   57|       |    tsSum{copy.tsSum}, tsSub{copy.tsSub}, tsProduct{copy.tsProduct},
   58|      1|    less{copy.less}, greater{copy.greater} {}
   59|       |
   60|       |
   61|       |
   62|       |/*************************************************************************
   63|       |                              Simplify
   64|       |**************************************************************************/
   65|       |
   66|       |// simplify
   67|     51|void TimeSpan::simplify () {
   68|     51|  this->totalSeconds = this->second + (this->minute * 60) + (this->hour * 60 * 60);
   69|     51|
   70|     51|  int hours = totalSeconds / (60 * 60);
   71|     51|  int leftOverHourSeconds = totalSeconds % (60 * 60);
   72|     51|  int minutes = leftOverHourSeconds / 60;
   73|     51|  int seconds = leftOverHourSeconds % 60;
   74|     51|
   75|     51|  this->hour = hours;
   76|     51|  this->minute = minutes;
   77|     51|  this->second = seconds;
   78|     51|
   79|     51|  if(!isPositive()) {
   80|      1|    this->isNegative = true;
   81|      1|    flipSign();
   82|      1|  }
   83|     50|  else {
   84|     50|    this->isNegative = false;
   85|     50|  }
   86|     51|
   87|     51|  if(this->hour == 0) {
   88|     23|    this->hour = 0;
   89|     23|  }
   90|     51|  if(this->minute == 0) {
   91|     23|    this->minute = 0;
   92|     23|  }
   93|     51|  if(this->second == 0) {
   94|     26|    this->second = 0;
   95|     26|  }
   96|     51|}
   97|       |
   98|       |// flips sign of each time category
   99|     23|void TimeSpan::flipSign() {
  100|     23|  this->hour = this->hour * -1;
  101|     23|  this->minute = this->minute * -1;
  102|     23|  this->second = this->second * -1;
  103|     23|}
  104|       |
  105|       |/*************************************************************************
  106|       |                              Math Operations
  107|       |**************************************************************************/
  108|       |
  109|       |// add
  110|      4|TimeSpan &TimeSpan::operator+(const TimeSpan &ts) {
  111|      4|  delete this->tsSum;
  112|      4|  this->tsSum = new TimeSpan;
  113|      4|
  114|      4|  if(!this->isNegative) {
  115|      4|    flipSign();
  116|      4|  }
  117|      4|  if(!ts.isNegative) {
  118|      4|    flipSign();
  119|      4|  }
  120|      4|
  121|      4|  tsSum->second = this->second + ts.second;
  122|      4|  tsSum->minute = this->minute + ts.minute;
  123|      4|  tsSum->hour = this->hour + ts.hour;
  124|      4|
  125|      4|  tsSum->simplify();
  126|      4|
  127|      4|  return *tsSum;
  128|      4|}
  129|       |
  130|       |// subtract
  131|      5|TimeSpan &TimeSpan::operator-(const TimeSpan &ts) {
  132|      5|  delete this->tsSub;
  133|      5|  this->tsSub = new TimeSpan;
  134|      5|
  135|      5|  if(!this->isNegative) {
  136|      5|    flipSign();
  137|      5|  }
  138|      5|  if(!ts.isNegative) {
  139|      5|    flipSign();
  140|      5|  }
  141|      5|
  142|      5|  tsSub->second = this->second - ts.second;
  143|      5|  tsSub->minute = this->minute - ts.minute;
  144|      5|  tsSub->hour = this->hour - ts.hour;
  145|      5|
  146|      5|  tsSub->simplify();
  147|      5|
  148|      5|  return *tsSub;
  149|      5|}
  150|       |
  151|       |// add given TimeSpan to this TimeSpan
  152|      1|TimeSpan &TimeSpan::operator+=(const TimeSpan &ts) {
  153|      1|  if(!this->isNegative) {
  154|      1|    flipSign();
  155|      1|  }
  156|      1|  if(!ts.isNegative) {
  157|      1|    flipSign();
  158|      1|  }
  159|      1|
  160|      1|  this->second = this->second + ts.second;
  161|      1|  this->minute = this->minute + ts.minute;
  162|      1|  this->hour = this->hour + ts.hour;
  163|      1|
  164|      1|  this->simplify();
  165|      1|
  166|      1|  return *this;
  167|      1|}
  168|       |
  169|       |// subtract given TimeSpan from this TimeSpan
  170|      1|TimeSpan &TimeSpan::operator-=(const TimeSpan &ts) {
  171|      1|  if(!this->isNegative) {
  172|      1|    flipSign();
  173|      1|  }
  174|      1|  if(!ts.isNegative) {
  175|      1|    flipSign();
  176|      1|  }
  177|      1|
  178|      1|  this->second = this->second - ts.second;
  179|      1|  this->minute = this->minute - ts.minute;
  180|      1|  this->hour = this->hour - ts.hour;
  181|      1|
  182|      1|  this->simplify();
  183|      1|
  184|      1|  return *this;
  185|      1|}
  186|       |
  187|       |// multiply with an integer
  188|      7|TimeSpan &TimeSpan::operator*(unsigned int number) {
  189|      7|  delete this->tsProduct;
  190|      7|  this->tsProduct = new TimeSpan;
  191|      7|
  192|      7|  tsProduct->second = this->second * number;
  193|      7|  tsProduct->minute = this->minute * number;
  194|      7|  tsProduct->hour = this->hour * number;
  195|      7|
  196|      7|  tsProduct->simplify();
  197|      7|
  198|      7|  return *tsProduct;
  199|      7|}
  200|       |
  201|       |
  202|       |
  203|       |/*************************************************************************
  204|       |                              Comparisons
  205|       |**************************************************************************/
  206|       |
  207|       |// equality ==
  208|     11|bool TimeSpan::operator==(const TimeSpan &ts) const {
  209|     11|  return (this->hour   == ts.hour   &&
  210|     11|          this->minute == ts.minute &&
  211|     11|          this->second == ts.second);
  212|     11|}
  213|       |
  214|       |// inequality !=
  215|      2|bool TimeSpan::operator!=(const TimeSpan &ts) const {
  216|      2|  return (!operator==(ts));
  217|      2|}
  218|       |
  219|       |// less than
  220|      3|bool TimeSpan::operator<(const TimeSpan &ts) const {
  221|      3|  return (this->totalSeconds < ts.totalSeconds);
  222|      3|}
  223|       |
  224|       |// greater than
  225|      3|bool TimeSpan::operator>(const TimeSpan &ts) const {
  226|      3|  return (this->totalSeconds > ts.totalSeconds);
  227|      3|}
  228|       |
  229|       |// less than or equal to
  230|      2|bool TimeSpan::operator<=(const TimeSpan &ts) {
  231|      2|  return *this < ts || *this == ts;
  232|      2|}
  233|       |
  234|       |// greater than or equal to
  235|      2|bool TimeSpan::operator>=(const TimeSpan &ts) {
  236|      2|  return *this > ts || *this == ts;
  237|      2|}
  238|       |
  239|       |
  240|       |
  241|       |/*************************************************************************
  242|       |                              Accessors
  243|       |**************************************************************************/
  244|       |
  245|       |// hour component
  246|      1|int TimeSpan::getHour() const { return this->hour; }
  247|       |
  248|       |// minute component
  249|      1|int TimeSpan::getMinute() const { return this->minute; }
  250|       |
  251|       |// second component
  252|      1|int TimeSpan::getSecond() const { return this->second; }
  253|       |
  254|       |// true if timespan is 0 or larger
  255|     53|bool TimeSpan::isPositive() const {
  256|     53|  return (this->totalSeconds >= 0);
  257|     53|}
  258|       |
  259|       |
  260|       |
  261|       |/*************************************************************************
  262|       |                              Destructor
  263|       |**************************************************************************/
  264|       |
  265|       |// destructor
  266|     34|TimeSpan::~TimeSpan() {
  267|     34|  delete this->tsSum;
  268|     34|  delete this->tsSub;
  269|     34|  delete this->tsProduct;
  270|     34|}

Sun Apr 25 16:30:17 PDT 2021
=====================================================
To create an output.txt file with all the output from this script
Run the below command
      ./create-output.sh > output.txt 2>&1 
=====================================================
